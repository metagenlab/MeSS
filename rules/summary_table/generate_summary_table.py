from Bio import Entrez
import random as rd
import pandas as pd


def ref_or_not(taxid, search_term):
    '''
    function that searches for reference genomes in the NCBI assembly database
    its output is a dictionary with assembly info (or empty if no reference genome found)
    taxid=taxonomy id searched from the list of species
    search term= search term defined by the user
    '''
    id_list = Entrez.read(Entrez.esearch(db='assembly', term=search_term % taxid))['IdList']
    print('\nSearch term:', search_term)
    ref = True
    if len(id_list) > 1:
        print('\nfound %i reference genomes' % len(id_list))
        random_pick = rd.choice(id_list)
        print('\nRandom choice of %s (assembly ID) as the reference' % random_pick)
        genome_summary = Entrez.read(Entrez.esummary(db='assembly', id=random_pick))
    if len(id_list) == 1:
        print('\nfound 1 reference genome')
        genome_summary = Entrez.read(Entrez.esummary(db='assembly', id=id_list))
    if len(id_list) == 0:
        ref = False
        print('\nDid not find reference genome ! (Restricting search term)')

    if ref:
        acc = genome_summary['DocumentSummarySet']['DocumentSummary'][0]['AssemblyAccession']
        name = genome_summary['DocumentSummarySet']['DocumentSummary'][0]['SpeciesName']
        status = genome_summary['DocumentSummarySet']['DocumentSummary'][0]['AssemblyStatus']
        reference_status = genome_summary['DocumentSummarySet']['DocumentSummary'][0]['RefSeq_category']
        ftppath_refseq = genome_summary['DocumentSummarySet']['DocumentSummary'][0]['FtpPath_RefSeq']
        dic = {'acc': acc, 'name': name, 'status': status, 'taxid': taxid, 'reference': reference_status,
               'path': ftppath_refseq}
    if not ref:
        dic = None
    return dic


def genome_list_to_csv(input_list):
    '''
    function that iterates ref_or_not() and restricts its search terms if the output is None
    input_list=input of species names (from summary_table.tsv)
    read_percentage=array generated by generate_even_prop()
    '''
    acc_list = []
    prop_list = [0] * len(input_list)
    name_list = []
    status_list = []
    taxid_list = []
    ref_list = []
    path_list = []
    for i in input_list:
        print('\n searching for', i, '...')
        taxid = Entrez.read(Entrez.esearch(db='taxonomy', term=i))['IdList'][0]
        search_term = 'txid%s[Organism:exp] AND ("complete genome"[filter]) AND ("latest refseq"[filter]) AND ("representative genome"[filter] OR "reference genome"[filter])'
        genome_of_choice = ref_or_not(taxid, search_term)

        if taxid == '9606':  # For the human id the previous search term does not work because the assembly status == chromosome
            search_term = 'txid%s[Organism:exp] AND ("latest refseq"[filter])'
            print(search_term)
            genome_of_choice = ref_or_not(taxid, search_term)

        if genome_of_choice == None:
            search_term = 'txid%s[Organism:exp] AND ("complete genome"[filter])'  # restrict the search term to complete genomes
            print(search_term)
            genome_of_choice = ref_or_not(taxid, search_term)

        acc_list.append(genome_of_choice['acc'])
        name_list.append(genome_of_choice['name'])
        status_list.append(genome_of_choice['status'])
        ref_list.append(genome_of_choice['reference'])
        taxid_list.append(genome_of_choice['taxid'])
        path_list.append(genome_of_choice['path'])

    data = {'AssemblyAccession': acc_list, 'PercentReads': prop_list, 'Name': name_list, 'TaxID': taxid_list,
            'AssemblyStatus': status_list, 'ReferenceStatus': ref_list, 'RefseqPath': path_list}
    df = pd.DataFrame(data)
    return df


def generate_even_prop(taxid_list, pv, pb, ph, pe):
    '''
    function that calculates the number of viral human and bacterial genomes from taxids
    and assigns even proportions for each genome

    ph=proportion of human reads
    pb=proportion of bacterial reads
    pv=proportion of viral reads
    pe=proportion of eukaryotic reads
    species_names=list of names inputted by the user
    '''
    read_prop = []
    nh = 0
    nv = 0
    nb = 0
    ne = 0
    scientific_names = []
    lineages_list = []
    dic_tax_info = Entrez.read(Entrez.efetch(db='taxonomy', id=taxid_list))

    for i in range(len(dic_tax_info)):

        scientific_names.append(dic_tax_info[i]['ScientificName'])

        lineage = dic_tax_info[i]['Lineage'].split('; ')

        if lineage[len(lineage) - 1] == 'Homo':
            lineages_list.append(lineage[len(lineage) - 1])
            nh += 1
            human_prop = ph / nh

        if lineage[1] == 'Eukaryota' and not lineage[len(lineage) - 1] == 'Homo':
            lineages_list.append(lineage[1])
            ne += 1 - nh
            if ne == 0:
                euka_prop = 0
            else:
                euka_prop = pe / ne

        if lineage[1] == 'Bacteria':
            lineages_list.append(lineage[1])
            nb += 1
            bact_prop = pb / nb
        if lineage[0] == 'Viruses':
            lineages_list.append(lineage[0])
            nv += 1
            vir_prop = pv / nv

    for i in lineages_list:
        if i == 'Homo':
            read_prop.append(human_prop)
        if i == 'Eukaryota' and not i == 'Homo':
            read_prop.append(euka_prop)
        if i == 'Bacteria':
            read_prop.append(bact_prop)
        if i == 'Viruses':
            read_prop.append(vir_prop)

        dico = {'ScientificNames': scientific_names, 'Lineage': lineages_list, 'percent_reads': read_prop}

    print('Genome counts:', '\nHuman', nh, '\nViral', nv, '\nBacterial', nb, '\nEukaryotes(other than Human)', ne)
    return dico


'''
Main
'''
Entrez.email = snakemake.params['NCBI_email']

Entrez.api_key = snakemake.params['NCBI_key']

query = list(pd.read_csv(snakemake.input[0], delimiter='\t')['UserInputName'])

table = genome_list_to_csv(query)  # table without read percentages

# Generating read percentages
vrp = snakemake.params['proportion_reads']['virus']
hrp = snakemake.params['proportion_reads']['human']
brp = snakemake.params['proportion_reads']['bacteria']
erp = snakemake.params['proportion_reads']['non_human_eukaryotes']
taxid_list = list(table['TaxID'])
even_prop_list = generate_even_prop(taxid_list, vrp, brp, hrp, erp)['percent_reads']
table['PercentReads'] = even_prop_list
print(table)
'''
Writing the summary table
'''
table.to_csv(snakemake.output[0], sep='\t', header=True)