include: "simulate_reads.smk"


replicates = list(range(1, config["replicates"] + 1))
community_name = config["community_name"]
read_direction = []
if config["seq_tech"] != "illumina":
    read_direction = config["seq_tech"]
if config["seq_tech"] == "illumina" and config["read_status"] == "single":
    read_direction = "single"
if config["seq_tech"] == "illumina" and config["read_status"] == "paired":
    read_direction = ["R1", "R2"]


def assembly_and_bam_list(wildcards):
    try:
        directory = config["assemblies_dir"]
        files = glob.glob(os.path.join(directory, "*.fna"))
        assemblynames = [file.split("/")[-1].split(".fna")[0] for file in files]
        assemblies = expand(f"{community_name}/assemblies/{{i}}.fna", i=assemblynames)
    except KeyError:
        checkpoint_directory = f"{community_name}/assemblies"
        assemblynames = glob_wildcards(
            os.path.join(checkpoint_directory, "{i}_genomic.fna.gz")
        ).i
        assemblies = expand(
            f"{checkpoint_directory}/{{i}}_genomic.fna.gz", i=assemblynames
        )

    if config["bam"]:
        bam = expand(
            f"bam/{community_name}-{{rep}}-{{i}}.bam", i=assemblynames, rep=replicates
        )
        all = bam + assemblies
    else:
        all = assemblies
    print("ALL", all)
    return all


def downloads(wildcards, extension):
    checkpoint_output = checkpoints.download_assemblies.get(**wildcards).output[0]
    directory = "/".join((checkpoint_output.split("/")[0:2]))
    return expand(
        f"{community_name}/assemblies/{{i}}{extension}",
        i=glob_wildcards(os.path.join(directory, f"{{i}}{extension}")).i,
    )


rule all_download:
    input:
        f"{community_name}/download/assembly_summary.tsv",
        lambda wildcards: downloads(wildcards, ".fna.gz"),


rule all_sim:
    input:
        expand(
            "simreads/{community}-{rep}_{rd}.fq.gz",
            community=community_name,
            rep=replicates,
            rd=read_direction,
        ),
        expand(
            "taxonomy-{community}-{rep}_{rd}.tsv",
            community=community_name,
            rep=replicates,
            rd=read_direction,
        ),
        expand(
            "readcounts-{community}-{rep}.tsv",
            community=community_name,
            rep=replicates,
        ),
        expand(
            "krona/{community}-{rep}_{rd}.html",
            community=community_name,
            rep=replicates,
            rd=read_direction,
        ),
        assembly_and_bam_list,
