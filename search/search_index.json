{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>The Metagenomic Sequence Simulator (MeSS) is a Snakemake pipeline, implemented using Snaketool, for simulating illumina, Oxford Nanopore (ONT) and Pacific Bioscience (PacBio) shotgun metagenomic samples.</p> <ul> <li> <p> Set up in few minutes</p> <p>Install <code>mess</code> with <code>mamba</code> and get started within minutes</p> <p> Getting started</p> </li> <li> <p> Streamlined pipeline</p> <p>Easily download genomes and simulate reads in a single command</p> <p> Step-by-step guide</p> </li> <li> <p> Multi-sequencing technologies</p> <p>Simulate sequencing runs for both long and short reads</p> <p> Tutorials</p> </li> <li> <p> Fast and scalable</p> <p>MeSS can generate complex communities in a few minutes</p> <p> Benchmarks</p> </li> </ul>"},{"location":"#overview","title":"Overview","text":"<p>MeSS takes as input NCBI taxa or local genome assemblies to generate either long (PacBio or ONT) or short (illumina) reads. In addition to reads, MeSS optionally generates bam alignment files and taxonomic profiles in bioboxes format.</p> <p></p>"},{"location":"#installation","title":"Installation","text":"<pre><code>mamba create -n mess mess\n</code></pre>"},{"location":"#usage","title":"Usage","text":""},{"location":"citation/","title":"Citation","text":""},{"location":"install/","title":"Install","text":""},{"location":"install/#mamba-recommended","title":"Mamba (recommended)","text":"<p>Install mamba via miniforge</p> <pre><code>curl -L -O \"https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-$(uname)-$(uname -m).sh\"\nbash Miniforge3-$(uname)-$(uname -m).sh\n</code></pre> <p>Next, configure strict channel priority:</p> <pre><code>conda config --add channels defaults\nconda config --add channels bioconda\nconda config --add channels conda-forge\nconda config --set channel_priority strict\n</code></pre> <p>Install mess with mamba</p> <pre><code>mamba create -n mess mess\n</code></pre>"},{"location":"install/#git","title":"Git","text":"<p>Install Mamba as shown before, clone the mess repo and install via pip.</p> <pre><code>git clone https://github.com/metagenlab/MeSS\npip install -e MeSS\n</code></pre>"},{"location":"install/#docker","title":"Docker","text":""},{"location":"install/#github-container-registry","title":"github container registry","text":"<pre><code>docker pull ghcr.io/metagenlab/mess:latest\n</code></pre>"},{"location":"install/#biocontainers","title":"biocontainers","text":"<pre><code>docker pull quay.io/biocontainers/mess:0.8.2--pyhdfd78af_0\n</code></pre>"},{"location":"motivation/","title":"Motivation","text":""},{"location":"motivation/#what","title":"What ?","text":"<p>MeSS is a snakemake-powered cli for downloading genomes and simulating metagenomes.</p>"},{"location":"motivation/#why","title":"Why ?","text":"<p>Shotgun metagenomic samples of microbiota can be a challenge to analyse. In fact, given their intrinsic complexities coupled with technical challenges in the wet-lab, it is difficult to know exactly what is truly present in the sample. Simulating such samples offers a controlled environment allowing to benchmark bioinformatics tools, optimize study design, calcuate statistical power, etc ...</p>"},{"location":"motivation/#when","title":"When ?","text":"<ul> <li>Testing sequencing's detection limit</li> </ul> <p>Let's say, for example, you have a stahpylococcus aureus that is present at roughly 0.01% abundance, and you want to know at which sequencing depth you can detect it. With MeSS you can easily make samples with mixes of genomes at different abundances and sequencing depths for a selected sequencing technology.</p> <ul> <li>Benchmarking taxonomic classifiers</li> </ul> <p>MeSS includes read simulators that generate gold standard bam files. This means that you know the origin of every simulated read, and thus know the true composition of the sample. This allows comparing the results of tools like centrifuge or kraken2 against a ground truth dataset.</p> <ul> <li>Testing the impact of sequencing technology on genome assembly</li> </ul> <p>Let's suppose that you have a bacterial isolate that you plan to sequence. However, you are not sure about which sequencing technology to use, at which depth, etc ... You can use MeSS to easily to generate reads at different depth, with different sequencing technologies and error profiles (ONT 10.4.1, PacBio hifi, illumina miseq...). Simulated reads can be assembled, and you an evaluate the impact of sequencing variables on your assembly.</p>"},{"location":"motivation/#alternatives","title":"Alternatives","text":"<p>CAMISIM is the state-of-the-art shotgun metagenomics simulator. At the time, CAMISIM was slow and it's dependencies had to be installed by hand, so we decided to write our own tool !</p> Warning <p>CAMISIM will have an upcoming faster version written in nextflow !  Go check it out at <code>CAMISIM</code></p>"},{"location":"benchmarks/","title":"Benchmarks","text":"<p>We benchmarked MeSS and CAMISIM, the state-of-the art metagenome simulator, in terms of species composition and resource usage.</p> <p>We demonstrated that, MeSS generates the same species composition as CAMISIM, while being 10x faster.</p>"},{"location":"benchmarks/#species-composition","title":"Species composition","text":""},{"location":"benchmarks/#resource-usage","title":"Resource usage","text":""},{"location":"benchmarks/resource-usage/","title":"Resource usage","text":"<p>16 samples were used to benchmark MeSS and CAMISIM resources usage. </p> <p>Samples were create by subsampling 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 20, 40, 80, 160, 320, 640 genomes from a total of 2000 complete bacterial genomes (downloaded with assembly_finder). </p> <p>Each genome was covered at 1x using art_illumina with CAMISIM's custom MBARC error model.</p> <p>See this nextflow pipeline to run the benchmark.</p>"},{"location":"benchmarks/resource-usage/#results","title":"Results","text":""},{"location":"benchmarks/resource-usage/#physical-ram-usage","title":"Physical RAM usage","text":""},{"location":"benchmarks/resource-usage/#cpu-usage","title":"CPU usage","text":""},{"location":"benchmarks/resource-usage/#cpu-time","title":"CPU time","text":"<p>Warning</p> <p>To simulate a sample with 2.4G base pairs, using one CPU, CAMISIM takes 32 hours, while MeSS takes 3 hours.</p>"},{"location":"benchmarks/resource-usage/#conclusions","title":"Conclusions","text":"<p>MeSS vs CAMISIM on average:</p> <ul> <li> 5x more parallel (CPU usage)</li> <li> 10x faster using one CPU (CPU time)</li> <li> Uses 16.7x less memory (physical RAM)</li> </ul>"},{"location":"benchmarks/species-composition/","title":"Species composition","text":"<p>5 samples from the human microbiome project were were classified with kraken2 and bracken. Taxa with at least at 200 reads were kept and used as input to both MeSS and CAMISIM.</p> <p>Use this nextflow pipeline to generate the fastqs. </p>"},{"location":"benchmarks/species-composition/#results","title":"Results","text":"<p>microViz was used for the ordination plots and statistical tests.</p>"},{"location":"benchmarks/species-composition/#bray-curtis","title":"Bray-curtis","text":"<p> Samples from the same bodysite cluster together. In addition, simulated samples cluster well with real samples (gold_standard and gs_filtered).</p>"},{"location":"benchmarks/species-composition/#permanova","title":"PERMANOVA","text":"<p> Null hypothesis : No significant difference in species composition between simulated and non simulated samples</p> Code <pre><code>perm &lt;- dist_permanova(mdist,\n    variables = \"origin:simulated+body_site\",\n    n_perms = 999, \n    n_processes = 3\n)\n</code></pre> <pre><code>                 Df SumOfSqs      R2       F Pr(&gt;F)\nbody_site         3   12.153 0.37843 15.6933  0.001 ***\norigin:simulated  3    1.117 0.03479  1.4429  0.067 .\nResidual         73   18.844 0.58678\nTotal            79   32.115 1.00000\n</code></pre> <p> Significant difference between body sites. No significant difference between simulated and real samples</p>"},{"location":"benchmarks/species-composition/#beta-dispersion","title":"Beta dispersion","text":"<p> Null hypothesis : No significant difference in dispersion between samples of different origin</p> <pre><code>Fit: aov(formula = distances ~ group, data = df)\n\n$group\n                                   diff         lwr        upr     p adj\ngs_filtered-gold_standard  2.249163e-03 -0.03593552 0.04043384 0.9986690\ncamisim-gold_standard     -2.310968e-02 -0.06129435 0.01507500 0.3905351\nmess-gold_standard        -2.308946e-02 -0.06127414 0.01509522 0.3913195\ncamisim-gs_filtered       -2.535884e-02 -0.06354352 0.01282584 0.3082419\nmess-gs_filtered          -2.533862e-02 -0.06352330 0.01284606 0.3089344\nmess-camisim               2.021632e-05 -0.03816446 0.03820490 1.0000000\n</code></pre> <p> No significant difference between filtered and non-filtered samples, simulated and real samples.</p>"},{"location":"benchmarks/species-composition/#conclusions","title":"Conclusions","text":"<ul> <li> Same species composition between original and filtered samples</li> <li> Same species composition between MeSS and CAMISIM</li> </ul>"},{"location":"commands/","title":"Commands","text":""},{"location":"commands/#download","title":"<code>download</code>","text":""},{"location":"commands/#simulate","title":"<code>simulate</code>","text":""},{"location":"commands/#run","title":"<code>run</code>","text":""},{"location":"commands/#hmp-template","title":"<code>hmp-template</code>","text":""},{"location":"commands/download/","title":"download","text":"<p>Download genomes from taxa or accessions table</p>"},{"location":"commands/download/#help","title":"Help","text":""},{"location":"commands/download/#example","title":"Example","text":"<pre><code>mess download -i minimal_test.tsv\n</code></pre>"},{"location":"commands/hmp-template/","title":"hmp-template","text":""},{"location":"commands/hmp-template/#help","title":"Help","text":""},{"location":"commands/hmp-template/#example","title":"Example","text":""},{"location":"commands/hmp-template/#gut-samples","title":"Gut samples","text":"<pre><code>mess hmp-template --site gut -o gut\n</code></pre>"},{"location":"commands/hmp-template/#specific-sample-from-buccal-mucosa","title":"Specific sample from buccal mucosa","text":"<pre><code>mess hmp-template --site buccal_mucosa --sample SRS013506 -o SRS013506\n</code></pre>"},{"location":"commands/run/","title":"Run","text":"<p>Run all steps of the pipeline</p>"},{"location":"commands/run/#help","title":"Help","text":""},{"location":"commands/run/#example","title":"Example","text":"<pre><code>mess run -i &lt;input.tsv&gt; -o &lt;output_dir&gt;\n</code></pre>"},{"location":"commands/simulate/","title":"simulate","text":""},{"location":"commands/simulate/#help","title":"Help","text":""},{"location":"commands/simulate/#examples","title":"Examples","text":""},{"location":"commands/simulate/#input","title":"Input","text":"<p>table with fasta paths</p> fasta path cov_sim tax_id total_sequence_length fasta1 /path/to/fasta1.fna.gz 10 taxid1 6666666 fasta2 /path/to/fasta2.fna.gz 10 taxid2 5555555"},{"location":"getting_started/","title":"Getting started","text":""},{"location":"getting_started/#quick-start","title":"Quick start","text":""},{"location":"getting_started/#install-with-mamba","title":"Install with mamba","text":"<pre><code>mamba create -n mess mess\n</code></pre>"},{"location":"getting_started/#run","title":"Run","text":"<pre><code>mess test --bam\n</code></pre>"},{"location":"getting_started/#output","title":"Output","text":"<pre><code>\ud83d\udcc2mess_out\n \u2523 \ud83d\udcc2assembly_finder\n \u2503 \u2523 \ud83d\udcc2download\n \u2503 \u2503 \u2523 \ud83d\udcc2GCF_000418345.1\n \u2503 \u2503 \u2503 \u2517 \ud83d\udcdcGCF_000418345.1_ASM41834v1_genomic.fna.gz\n \u2503 \u2503 \u2523 \ud83d\udcc2GCF_003812505.1\n \u2503 \u2503 \u2503 \u2517 \ud83d\udcdcGCF_003812505.1_ASM381250v1_genomic.fna.gz\n \u2503 \u2503 \u2517 \ud83d\udcdc.snakemake_timestamp\n \u2503 \u2523 \ud83d\udcdcarchive.zip\n \u2503 \u2523 \ud83d\udcdcassembly_finder.log\n \u2503 \u2523 \ud83d\udcdcassembly_summary.tsv\n \u2503 \u2523 \ud83d\udcdcconfig.yaml\n \u2503 \u2523 \ud83d\udcdcsequence_report.tsv\n \u2503 \u2517 \ud83d\udcdctaxonomy.tsv\n \u2523 \ud83d\udcc2bam\n \u2503 \u2523 \ud83d\udcdcsample1.bam\n \u2503 \u2523 \ud83d\udcdcsample1.bam.bai\n \u2503 \u2523 \ud83d\udcdcsample2.bam\n \u2503 \u2517 \ud83d\udcdcsample2.bam.bai\n \u2523 \ud83d\udcc2fastq\n \u2503 \u2523 \ud83d\udcdcsample1_R1.fq.gz\n \u2503 \u2523 \ud83d\udcdcsample1_R2.fq.gz\n \u2503 \u2523 \ud83d\udcdcsample2_R1.fq.gz\n \u2503 \u2517 \ud83d\udcdcsample2_R2.fq.gz\n \u2523 \ud83d\udcc2processing\n \u2503 \u2523 \ud83d\udcdccov.tsv\n \u2503 \u2517 \ud83d\udcdcsplit.tsv\n \u2523 \ud83d\udcc2tax\n \u2503 \u2523 \ud83d\udcdcsample1_profile.txt\n \u2503 \u2517 \ud83d\udcdcsample2_profile.txt\n \u2523 \ud83d\udcdcconfig.yaml\n \u2517 \ud83d\udcdcmess.log\n</code></pre>"},{"location":"getting_started/#step-by-step-guide","title":"Step-by-step guide","text":""},{"location":"guide/","title":"Step-by-step guide","text":"<p>This guide details <code>mess test</code> steps and outputs.</p>"},{"location":"guide/#command","title":"Command","text":"<pre><code>mess test --bam\n</code></pre>"},{"location":"guide/#steps-description","title":"Steps description","text":""},{"location":"guide/#1-setup-inputs","title":"1) Setup inputs","text":""},{"location":"guide/#2-download-genomes","title":"2) Download genomes","text":""},{"location":"guide/#3-simulate-reads","title":"3) Simulate reads","text":""},{"location":"guide/#4-examining-outputs","title":"4) Examining outputs","text":""},{"location":"guide/download/","title":"2) Download genomes","text":"<p>Using minimal_test.tsv: minimal_test.tsv<pre><code>taxon   nb  cov_sim sample\nstaphylococcus_aureus   1   0.1 sample1\n1290    1   0.1 sample2\n</code></pre></p> <p><code>mess</code> fetches n reference genome(s) for each taxon/accession with <code>assembly_finder</code>.</p>"},{"location":"guide/download/#output","title":"Output","text":"<p>The download step outputs:</p> <ul> <li>Compressed fasta in assembly_finder/download</li> <li>Taxonomy, assembly and sequence summaries in assembly_finder</li> </ul> <pre><code>\ud83d\udcc2mess_out\n \u2523 \ud83d\udcc2assembly_finder\n \u2503 \u2523 \ud83d\udcc2download\n \u2503 \u2503 \u2523 \ud83d\udcc2GCF_000013425.1\n \u2503 \u2503 \u2503 \u2517 \ud83d\udcdcGCF_000013425.1_ASM1342v1_genomic.fna.gz\n \u2503 \u2503 \u2523 \ud83d\udcc2GCF_003812505.1\n \u2503 \u2503 \u2503 \u2517 \ud83d\udcdcGCF_003812505.1_ASM381250v1_genomic.fna.gz\n \u2503 \u2523 \ud83d\udcdcassembly_summary.tsv\n \u2503 \u2523 \ud83d\udcdcconfig.yaml\n \u2503 \u2523 \ud83d\udcdcsequence_report.tsv\n \u2503 \u2517 \ud83d\udcdctaxonomy.tsv\n</code></pre>"},{"location":"guide/download/#assembly-summary","title":"Assembly summary","text":"taxon accession current_accession paired_accession source_database annotation_info.name annotation_info.provider annotation_info.release_date annotation_info.stats.gene_counts.non_coding annotation_info.stats.gene_counts.protein_coding annotation_info.stats.gene_counts.pseudogene annotation_info.stats.gene_counts.total assembly_level assembly_name assembly_status assembly_type bioproject_accession biosample.accession biosample.bioprojects biosample.description.organism_name biosample.description.tax_id biosample.description.title biosample.last_updated biosample.models biosample.owner.name biosample.package biosample.publication_date biosample.status.status biosample.status.when biosample.submission_date paired_assembly.accession paired_assembly.annotation_name paired_assembly.status refseq_category release_date submitter contig_l50 contig_n50 gc_count gc_percent number_of_component_sequences number_of_contigs number_of_scaffolds scaffold_l50 scaffold_n50 total_number_of_chromosomes total_sequence_length total_ungapped_length average_nucleotide_identity.best_ani_match.ani average_nucleotide_identity.best_ani_match.assembly average_nucleotide_identity.best_ani_match.assembly_coverage average_nucleotide_identity.best_ani_match.category average_nucleotide_identity.best_ani_match.organism_name average_nucleotide_identity.best_ani_match.type_assembly_coverage average_nucleotide_identity.category average_nucleotide_identity.comment average_nucleotide_identity.match_status average_nucleotide_identity.submitted_ani_match.ani average_nucleotide_identity.submitted_ani_match.assembly average_nucleotide_identity.submitted_ani_match.assembly_coverage average_nucleotide_identity.submitted_ani_match.category average_nucleotide_identity.submitted_ani_match.organism_name average_nucleotide_identity.submitted_ani_match.type_assembly_coverage average_nucleotide_identity.submitted_organism average_nucleotide_identity.submitted_species average_nucleotide_identity.taxonomy_check_status checkm_info.checkm_marker_set checkm_info.checkm_marker_set_rank checkm_info.checkm_species_tax_id checkm_info.checkm_version checkm_info.completeness checkm_info.completeness_percentile checkm_info.contamination infraspecific_names.strain organism_name tax_id annotation_info.method annotation_info.pipeline annotation_info.software_version assembly_method biosample.owner.contacts sequencing_tech genome_coverage path staphylococcus_aureus GCF_000013425.1 GCF_000013425.1 GCA_000013425.1 SOURCE_DATABASE_REFSEQ Annotation submitted by NCBI RefSeq NCBI RefSeq 2016-08-03 75 2767 30 2872 Complete Genome ASM1342v1 current haploid PRJNA237 SAMN02604235 [{'accession': 'PRJNA237'}] Staphylococcus aureus subsp. aureus NCTC 8325 93061 Sample from Staphylococcus aureus subsp. aureus NCTC 8325 2015-05-18T13:21:01.110 ['Generic'] NCBI Generic.1.0 2014-01-30T15:13:19.920 live 2014-01-30T15:13:19.920 2014-01-30T15:13:19.920 GCA_000013425.1 Annotation submitted by University of Oklahoma Health Sciences Center current reference genome 2006-02-13 University of Oklahoma Health Sciences Center 1 2821361 927332 33.0 1 1 1 1 2821361 1 2821361 2821361 99.94 GCA_006094915.1 96.32 type Staphylococcus aureus 97.66 category_na na species_match 99.94 GCA_006094915.1 96.32 type Staphylococcus aureus 97.66 Staphylococcus aureus subsp. aureus NCTC 8325 Staphylococcus aureus OK Staphylococcus aureus species 1280 v1.2.2 97.59 19.567595 0.39 NCTC 8325 Staphylococcus aureus subsp. aureus NCTC 8325 93061 na na na na na na na test_bam_out/assembly_finder/download/GCF_000013425.1/GCF_000013425.1_ASM1342v1_genomic.fna.gz 1290 GCF_003812505.1 GCF_003812505.1 GCA_003812505.1 SOURCE_DATABASE_REFSEQ GCF_003812505.1-RS_2024_03_28 NCBI RefSeq 2024-03-28 85 2142 35 2262 Complete Genome ASM381250v1 current haploid PRJNA231221 SAMN10163251 [{'accession': 'PRJNA231221'}] Staphylococcus hominis 1290 Pathogen: clinical or host-associated sample from Staphylococcus hominis 2019-05-14T13:08:20.304 ['Pathogen.cl'] US Food and Drug Administration Pathogen.cl.1.0 2018-10-02T00:00:00.000 live 2018-10-02T12:23:11.101 2018-10-02T12:23:11.100 GCA_003812505.1 NCBI Prokaryotic Genome Annotation Pipeline (PGAP) current representative genome 2018-11-21 US Food and Drug Administration 1 2220494 713682 31.5 3 3 3 1 2220494 3 2257431 2257431 99.99 GCA_900458635.1 98.99 type Staphylococcus hominis 99.01 category_na na species_match 99.99 GCA_900458635.1 98.99 type Staphylococcus hominis 99.01 Staphylococcus hominis Staphylococcus hominis OK Staphylococcus hominis species 1290 v1.2.2 90.97 47.945206 2.63 FDAARGOS_575 Staphylococcus hominis 1290 Best-placed reference protein set; GeneMarkS-2+ NCBI Prokaryotic Genome Annotation Pipeline (PGAP) 6.7 SMRT v. 2.3.0, HGAP v. 3.0 [{}] PacBio; Illumina 19.6x test_bam_out/assembly_finder/download/GCF_003812505.1/GCF_003812505.1_ASM381250v1_genomic.fna.gz"},{"location":"guide/download/#sequence-report","title":"Sequence report","text":"Assembly Accession Assembly Unplaced Count Assembly-unit accession Chromosome name GC Count GC Percent GenBank seq accession Molecule type Ordering RefSeq seq accession Role Seq length UCSC style name Unlocalized Count GCF_000013425.1 Primary Assembly chromosome 927332 CP000253.1 Chromosome NC_007795.1 assembled-molecule 2821361 GCF_003812505.1 Primary Assembly chromosome 702792 CP033732.1 Chromosome NZ_CP033732.1 assembled-molecule 2220494 GCF_003812505.1 Primary Assembly unnamed1 9555 CP033731.1 Plasmid NZ_CP033731.1 assembled-molecule 32498 GCF_003812505.1 Primary Assembly unnamed2 1335 CP033733.1 Plasmid NZ_CP033733.1 assembled-molecule 4439"},{"location":"guide/download/#taxonomy","title":"Taxonomy","text":"accession tax_id name rank kingdom phylum class order family genus species GCF_000013425.1 93061 Staphylococcus aureus subsp. aureus NCTC 8325 strain Bacteria Bacillota Bacilli Bacillales Staphylococcaceae Staphylococcus Staphylococcus aureus GCF_003812505.1 1290 Staphylococcus hominis species Bacteria Bacillota Bacilli Bacillales Staphylococcaceae Staphylococcus Staphylococcus hominis"},{"location":"guide/input/","title":"1) Setup inputs","text":"<p>All mess commands take as input one or multiple tables.</p> <p>In this guide we are using <code>mess test</code> to execute all the workflow steps using a minimal example (shown below) minimal_test.tsv<pre><code>taxon   nb  cov_sim sample\nstaphylococcus_aureus   1   0.1 sample1\n1290    1   0.1 sample2\n</code></pre></p> <p>The input file contains:</p> <ul> <li>Taxon/accession and nb columns for genome download </li> <li>Third column to calculate genome coverage for read simulation.</li> <li>sample column to map genomes to their respective sample</li> </ul>"},{"location":"guide/input/#other-examples","title":"Other examples","text":""},{"location":"guide/input/#table","title":"Table","text":"<p>See coverage calculation for more details</p> <p>Example</p> basesreadstax_abundanceseq_abundancecoverage taxon nb bases 1280 1 28213610 pseudomonas_aeruginosa 1 62644040 taxon nb reads 1280 1 94045 pseudomonas_aeruginosa 1 208813 taxon nb tax_abundance 1280 1 0.5 pseudomonas_aeruginosa 1 0.5 taxon nb seq_abundance 1280 1 0.32 pseudomonas_aeruginosa 1 0.68 taxon nb cov_sim 1280 1 10 pseudomonas_aeruginosa 1 10"},{"location":"guide/input/#directory","title":"Directory","text":"<p>If you want to simulate multiple samples at once, you can point to a directory with multiple tables (one for each sample, with the sample name in the file name).</p> <p>Example</p> <pre><code>\ud83d\udcc2sequencing_run\n\u2523 \ud83d\udcdcsample1.tsv\n\u2523 \ud83d\udcdcsample2.tsv\n\u2517 \ud83d\udcdcsample3.tsv\n</code></pre> <p>Or you can aggregate all sample info in one table</p> <p>Example</p> taxon nb cov_sim sample staphylococcus_aureus 1 10 sample1 1290 1 10 sample2 562 1 10 sample3"},{"location":"guide/output/","title":"4) Examine outputs","text":""},{"location":"guide/output/#directory-structure","title":"Directory structure","text":"<pre><code>\ud83d\udcc2mess_out\n \u2523 \ud83d\udcc2assembly_finder\n \u2503 \u2523 \ud83d\udcc2download\n \u2503 \u2503 \u2523 \ud83d\udcc2GCF_000418345.1\n \u2503 \u2503 \u2503 \u2517 \ud83d\udcdcGCF_000418345.1_ASM41834v1_genomic.fna.gz\n \u2503 \u2503 \u2523 \ud83d\udcc2GCF_003812505.1\n \u2503 \u2503 \u2503 \u2517 \ud83d\udcdcGCF_003812505.1_ASM381250v1_genomic.fna.gz\n \u2503 \u2503 \u2517 \ud83d\udcdc.snakemake_timestamp\n \u2503 \u2523 \ud83d\udcdcarchive.zip\n \u2503 \u2523 \ud83d\udcdcassembly_finder.log\n \u2503 \u2523 \ud83d\udcdcassembly_summary.tsv\n \u2503 \u2523 \ud83d\udcdcconfig.yaml\n \u2503 \u2523 \ud83d\udcdcsequence_report.tsv\n \u2503 \u2517 \ud83d\udcdctaxonomy.tsv\n \u2523 \ud83d\udcc2bam\n \u2503 \u2523 \ud83d\udcdcsample1.bam\n \u2503 \u2523 \ud83d\udcdcsample1.bam.bai\n \u2503 \u2523 \ud83d\udcdcsample2.bam\n \u2503 \u2517 \ud83d\udcdcsample2.bam.bai\n \u2523 \ud83d\udcc2fastq\n \u2503 \u2523 \ud83d\udcdcsample1_R1.fq.gz\n \u2503 \u2523 \ud83d\udcdcsample1_R2.fq.gz\n \u2503 \u2523 \ud83d\udcdcsample2_R1.fq.gz\n \u2503 \u2517 \ud83d\udcdcsample2_R2.fq.gz\n \u2523 \ud83d\udcc2processing\n \u2503 \u2523 \ud83d\udcdccov.tsv\n \u2503 \u2517 \ud83d\udcdcsplit.tsv\n \u2523 \ud83d\udcc2tax\n \u2503 \u2523 \ud83d\udcdcsample1_profile.txt\n \u2503 \u2517 \ud83d\udcdcsample2_profile.txt\n \u2523 \ud83d\udcdcconfig.yaml\n \u2517 \ud83d\udcdcmess.log\n</code></pre>"},{"location":"guide/output/#coverage-table","title":"Coverage table","text":"<p>Check genome size (total_sequence_length), coverage depth (cov_sim) and other stats for both samples in cov.tsv</p> sample1sample2 fasta total_sequence_length number_of_contigs reads bases seq_abundance cov_sim tax_abundance GCF_000013425.1 2821361 1 940.454 282136.1 1.0 0.1 1.0 fasta total_sequence_length number_of_contigs reads bases seq_abundance cov_sim tax_abundance GCF_003812505.1 2257431 3 752.477 225743.1 1.0 0.1 1.0"},{"location":"guide/output/#reads","title":"Reads","text":"<p>Let's check the fastq content using <code>seqkit stats</code>.</p> <pre><code>$ seqkit stats --all test_bam_out/fastq/*.fq.gz\nfile                    format  type  num_seqs  sum_len  min_len  avg_len  max_len   Q1   Q2   Q3  sum_gap  N50  N50_num  Q20(%)  Q30(%)  AvgQual  GC(%)\nfastq/sample1_R1.fq.gz  FASTQ   DNA        940  141,000      150      150      150  150  150  150        0  150        1   97.99   91.72    27.68  32.89\nfastq/sample1_R2.fq.gz  FASTQ   DNA        940  141,000      150      150      150  150  150  150        0  150        1   97.35    89.7    26.52  33.19\nfastq/sample2_R1.fq.gz  FASTQ   DNA        752  112,800      150      150      150  150  150  150        0  150        1   98.02   91.75    27.78  31.38\nfastq/sample2_R2.fq.gz  FASTQ   DNA        752  112,800      150      150      150  150  150  150        0  150        1   97.27    89.7    26.51  31.52\n</code></pre> <ul> <li> 90% of reads are Q30</li> <li> Requested amount of sequences were simulated (940 and 752 reads for sample1 and sample2 respectively)</li> <li> Both genomes are covered at 0.1x (divide sum_len by genome size)</li> </ul>"},{"location":"guide/output/#alignments","title":"Alignments","text":"<p>Using the <code>--bam</code> flag, sorted and indexed BAM files are generated, which can be quality controlled with qualimap. Qualimap reports for each sample can be aggregated using multiQC .</p>"},{"location":"guide/output/#qualimap","title":"Qualimap","text":"<pre><code>cd mess_out/bam \nfor bam in *.bam; do qualimap bamqc -bam $bam; done\n</code></pre>"},{"location":"guide/output/#multiqc","title":"MultiQC","text":"<pre><code>multiqc .\n</code></pre>"},{"location":"guide/output/#general-stats","title":"General stats","text":"Sample QualiMap_mqc-generalstats-qualimap-avg_gc QualiMap_mqc-generalstats-qualimap-median_insert_size QualiMap_mqc-generalstats-qualimap-1_x_pc QualiMap_mqc-generalstats-qualimap-5_x_pc QualiMap_mqc-generalstats-qualimap-10_x_pc QualiMap_mqc-generalstats-qualimap-30_x_pc QualiMap_mqc-generalstats-qualimap-50_x_pc QualiMap_mqc-generalstats-qualimap-median_coverage QualiMap_mqc-generalstats-qualimap-mean_coverage QualiMap_mqc-generalstats-qualimap-general_error_rate QualiMap_mqc-generalstats-qualimap-percentage_aligned QualiMap_mqc-generalstats-qualimap-mapped_reads QualiMap_mqc-generalstats-qualimap-total_reads sample1 0.1 0.0 100.0 1880 1880 sample1_stats 33.48098434004474 199 6.449724087062946 0.0 0.0 0.0 0.0 0 sample2 0.0999 0.0 100.0 1504 1504 sample2_stats 31.822164948453608 199 6.446044198028644 0.0003543851395679425 0.0 0.0 0.0 0"},{"location":"guide/output/#qualimap-bamqc-genome-stats","title":"qualimap bamqc genome stats","text":"Sample total_reads mapped_reads mapped_bases sequenced_bases duplication_rate mean_insert_size median_insert_size mean_mapping_quality gc_percentage general_error_rate homopolymer_indels mean_coverage percentage_aligned sample1 1880 1880 281999 281998 0.05 199.8862 199.0 91.0798 32.96 0.0 0.0 0.1 100.0 sample2 1504 1504 225601 225600 0.0 199.3763 199.0 83.9774 31.39 0.0 0.0 0.0999 100.0 <ul> <li> 0% general error rate and homopolymer indels</li> <li> At least 83 mapping quality with 100% read alignment</li> <li> Average coverage depth values are of 0.1x</li> </ul> <p>Warning</p> <p>Only 6% of both genome locations are covered at 1x. This is to be expected as our requested coverage depth is at 0.1x. If we want to cover a larger fraction of the genomes, we need to simulate more reads.</p>"},{"location":"guide/output/#taxonomic-profiles","title":"Taxonomic profiles","text":"sample1sample2 <pre><code>@SampleID:sample1\n@Version:0.10.0\n@Ranks:superkingdom|phylum|class|order|family|genus|species|strain\n@TaxonomyID:\n@@TAXID RANK    TAXPATH TAXPATHSN   PERCENTAGE\n2   superkingdom    2   Bacteria    100.000000000000000\n1239    phylum  2|1239  Bacteria|Bacillota  100.000000000000000\n91061   class   2|1239|91061    Bacteria|Bacillota|Bacilli  100.000000000000000\n1385    order   2|1239|91061|1385   Bacteria|Bacillota|Bacilli|Bacillales   100.000000000000000\n90964   family  2|1239|91061|1385|90964 Bacteria|Bacillota|Bacilli|Bacillales|Staphylococcaceae 100.000000000000000\n1279    genus   2|1239|91061|1385|90964|1279    Bacteria|Bacillota|Bacilli|Bacillales|Staphylococcaceae|Staphylococcus  100.000000000000000\n1280    species 2|1239|91061|1385|90964|1279|1280   Bacteria|Bacillota|Bacilli|Bacillales|Staphylococcaceae|Staphylococcus|Staphylococcus aureus    100.000000000000000\n93061   strain  2|1239|91061|1385|90964|1279|1280|93061 Bacteria|Bacillota|Bacilli|Bacillales|Staphylococcaceae|Staphylococcus|Staphylococcus aureus|Staphylococcus aureus subsp. aureus NCTC 8325  100.000000000000000\n</code></pre> <pre><code>@SampleID:sample2\n@Version:0.10.0\n@Ranks:superkingdom|phylum|class|order|family|genus|species|strain\n@TaxonomyID:\n@@TAXID RANK    TAXPATH TAXPATHSN   PERCENTAGE\n2   superkingdom    2   Bacteria    100.000000000000000\n1239    phylum  2|1239  Bacteria|Bacillota  100.000000000000000\n91061   class   2|1239|91061    Bacteria|Bacillota|Bacilli  100.000000000000000\n1385    order   2|1239|91061|1385   Bacteria|Bacillota|Bacilli|Bacillales   100.000000000000000\n90964   family  2|1239|91061|1385|90964 Bacteria|Bacillota|Bacilli|Bacillales|Staphylococcaceae 100.000000000000000\n1279    genus   2|1239|91061|1385|90964|1279    Bacteria|Bacillota|Bacilli|Bacillales|Staphylococcaceae|Staphylococcus  100.000000000000000\n1290    species 2|1239|91061|1385|90964|1279|1290   Bacteria|Bacillota|Bacilli|Bacillales|Staphylococcaceae|Staphylococcus|Staphylococcus hominis   100.000000000000000\n</code></pre> <ul> <li> Samples have the correct taxonomic profile in biobox format</li> </ul>"},{"location":"guide/simulate/","title":"3) Simulate reads","text":"<p>After fetching genomes in the download step, the pipeline processes fasta, prepares replicates, and calculates coverage depths for each sample. </p>"},{"location":"guide/simulate/#steps-details","title":"Steps details","text":""},{"location":"guide/simulate/#a-fasta-processing","title":"a) Fasta processing","text":""},{"location":"guide/simulate/#b-get-replicates-and-calculate-coverage","title":"b) Get replicates and calculate coverage","text":""},{"location":"guide/simulate/#c-read-and-alignments-processing","title":"c) Read and alignments processing","text":""},{"location":"guide/simulate/coverage/","title":"b) Calculate coverage","text":"<p>Before generating reads, <code>mess</code> calculates coverage depths for each genome according to values in the input table or a distribution set by the user.</p>"},{"location":"guide/simulate/coverage/#coverage-calculation","title":"Coverage calculation","text":""},{"location":"guide/simulate/coverage/#from-input-table-values","title":"From input table values","text":"<p>If sequence or taxonomic abundance is set, coverage is calculated starting from the total amount of base pairs per sample (set by <code>--bases</code>). If using reads and abundances, <code>--bases</code> is ignored, and the total amount of bases is calculated from the input table.</p> <pre><code>flowchart TB\n\n  K[coverage]\n  D[genome lengths]\n  subgraph with total bases\n    A(total bases) --&gt; |multiply by| B[sequence abundances]\n    B --&gt; C[bases]\n    C --&gt; |divide by| D\n    A -.-&gt; |divide by| D \n    D -.-&gt; F[uncorrected coverages]\n    F -.-&gt; |multiply by| G[taxonomic abundance]\n\n  end\n  subgraph without total bases\n    L[bases] ==&gt;|divide by| M(genome lengths)\n    N[reads] ==&gt;|multiply by| O(average read legth \n    and read pairing)\n    O ==&gt; L[bases]\n  end\n  D --&gt; K\n  G -.-&gt; K\n  M ==&gt; K</code></pre> <p> Path using sequence abundance</p> <p>---&gt; Path using taxonomic abundance</p> <p> Path using reads or bases</p> <p>Example</p> basesreadstax_abundanceseq_abundancecoverage taxon genome_size bases 1280 2821361 28213610 pseudomonas_aeruginosa 6264404 62644040 taxon genome_size reads 1280 2821361 94045 pseudomonas_aeruginosa 6264404 208813 taxon genome_size tax_abundance 1280 2821361 0.5 pseudomonas_aeruginosa 6264404 0.5 taxon genome_size seq_abundance 1280 2821361 0.32 pseudomonas_aeruginosa 6264404 0.68 taxon genome_size cov_sim 1280 2821361 10 pseudomonas_aeruginosa 6264404 10"},{"location":"guide/simulate/coverage/#from-distributions","title":"From distributions","text":""},{"location":"guide/simulate/coverage/#even-distribution","title":"Even distribution","text":"<p>If you want to have taxonomic abundances envenly distributed between genomes with the same taxonomic rank or tax_id, set <code>--dist even</code>.</p> <p>For example, if you have 10 genomes with 10 different taxonomic ranks or ids, each genome will have a tax_abundance of 1/10.</p>"},{"location":"guide/simulate/coverage/#log-normal","title":"Log normal","text":"<p>If you set <code>--dist lognormal</code>, each genome will be assigned a random taxonomic abundance following a lognormal distribution. You can control the shape of the curve by modifying the <code>--mu</code> and <code>--sigma</code> parameters (0 and 1 by default repsectively).</p> <p></p> <p>By Xenonoxid - Own work, CC BY-SA 4.0, https://commons.wikimedia.org/w/index.php?curid=114726542</p>"},{"location":"guide/simulate/coverage/#replicates","title":"Replicates","text":"<p>If replicates are set with<code>--replicates</code>, the same coverage values will be applied for each replicate. If you want variablitiy between replicates, you can increase the standard deviation with <code>--rep-sd</code>.</p>"},{"location":"guide/simulate/fa-processing/","title":"a) Fasta processing","text":"<p>Before generating reads, <code>mess</code> pre-processes fastas for read simulators as shown below:</p> <pre><code>graph LR\n  A[genome_asmV3.fna.gz] --&gt; B{seqkit \n  seq};\n  B--&gt; C[genome.fna];\n  C --&gt; D{split_contigs.py};\n  D --&gt; E[genome_contig1.fna];\n  D --&gt; F[genome_contig2.fna];\n  D --&gt; G[genome_contig3.fna];</code></pre>"},{"location":"guide/simulate/fa-processing/#seqkit-seq","title":"seqkit seq","text":""},{"location":"guide/simulate/fa-processing/#file-renaming","title":"File renaming","text":"<p>Files are renamed according to the <code>fasta</code> or <code>accession</code> column in the input file or assembly_summary.tsv file.</p> <p> Done to avoid Snakemake filename matching erros.</p>"},{"location":"guide/simulate/fa-processing/#decompressing","title":"Decompressing","text":"<p> Done because read simulators take decompressed fasta as input</p>"},{"location":"guide/simulate/fa-processing/#removing-long-fasta-headers","title":"Removing long fasta headers","text":"<p> Done to ensure correct BAM formatting for samtools</p>"},{"location":"guide/simulate/fa-processing/#split_contigspy","title":"split_contigs.py","text":""},{"location":"guide/simulate/fa-processing/#correct-amount-of-sequences","title":"Correct amount of sequences","text":"<p>Art_illumina generates the same amount of reads per contig (Milhaven and Pfeifer, 2023). This means that, for fragmented assemblies, read sampling will not be uniform across contigs.</p> <p>In fact, when we use <code>art_illumina --fcov 10</code> on this slightly fragmented E.coli genome, we expect 51534530 simulated bases (10x genome size). However we obtain, 51251100, which less than requested. Thus, to uniformly sample reads acros contigs, we split the genome and apply the same art_illumina command for each contig. </p>"},{"location":"guide/simulate/fa-processing/#compatibilty-with-pbsim3","title":"Compatibilty with pbsim3","text":"<p>Since pbsim3 already splits fasta, inputting split fasta is faster.</p>"},{"location":"guide/simulate/reads/","title":"c) Read simulation and processing","text":"<p><code>mess</code> feeds split fastas and their coverage depths to art_illumina or pbsim3 for read simulation as shown below.</p> <pre><code>flowchart TB\n  %%file types\n  fa[fasta]\n  fq[fastq]\n  fqgz[fastq.gz]\n  sam[sam]\n  maf[maf]\n  bam[bam]\n  bai[bam &lt;br/&gt;bam.bai]\n  cov[coverage.txt]\n  tax[biobox&lt;br/&gt;taxonomic&lt;br/&gt;profile]\n\n  %%tools\n  art(art_illumina)\n  pbsim(pbsim3)\n  cat(cat)\n  pigz(pigz)\n  sam2bam(bioconvert &lt;br/&gt;sam2bam)\n  maf2sam(bioconvert &lt;br/&gt;maf2sam)\n  shuffle(seqkit &lt;br/&gt;shuffle)\n  replace(seqkit &lt;br/&gt;replace)\n  merge(samtools &lt;br/&gt;merge)\n  sortindex(samtools &lt;br/&gt;sort &amp; index)\n  coverage(samtools &lt;br/&gt;coverage)\n  taxonkit(taxonkit &lt;br/&gt;profile2cami)\n\n  %%workflow \n  fa --&gt; art\n  fa --&gt; pbsim\n  fa2tax[genome taxids]\n  subgraph simulators\n    art\n    pbsim\n  end \n  art --&gt; fq\n  art ==&gt;|contigs sam| sam\n  pbsim --&gt; fq\n  pbsim ==&gt;|no header contigs &lt;br/&gt;maf| sed(sed)\n  sed ==&gt;|add contig header| maf\n  pbsim -.-&gt; ccs\n\n  fq --&gt;|contigs&lt;br/&gt;fastq| pigz\n  pigz --&gt;|contigs&lt;br/&gt;fastq.gz| cat\n  cat --&gt;|samples fastq| shuffle\n  shuffle --&gt;|shuffled fastq| replace\n  replace --&gt;|anonymized fastq| fqgz\n\n  maf ==&gt; maf2sam\n  maf2sam ==&gt; sam\n  sam ==&gt; sam2bam\n  sam2bam ==&gt; bam\n  bam ==&gt;|contigs bam| merge\n  merge ==&gt;|samples bam| sortindex\n  sortindex ==&gt;|sorted bam| coverage\n  fa2tax ==&gt; cov\n  coverage ==&gt;|contigs&lt;br/&gt;coverages| cov\n  cov ==&gt;|taxids&lt;br/&gt;coverages| taxonkit\n\n  ccs[ccs.sam] -.-&gt; sam2bam\n  bam -.-&gt; pbccs(pbccs)\n  pbccs -.-&gt;|hifi &lt;br/&gt;fastq.gz&lt;br/&gt;contigs| cat\n\n  taxonkit ==&gt; tax\n  sortindex ==&gt;|sorted&lt;br/&gt;indexed&lt;br/&gt;bam| bai  \n\n  subgraph output\n    fqgz\n    bai\n    tax \n  end</code></pre> <p> Path for fastq files</p> <p> Path for alignments (sam, bam, maf...)</p> <p>---&gt; Path for PacBio hifi fastq</p>"},{"location":"guide/simulate/reads/#reads-processing","title":"Reads processing","text":"<p>Simulators output uncompressed reads for every contig, which are then compressed with pigz and concatenated with cat. Concatenated fastq are then shuffled and anonymized with seqkit shuffle and seqkit replace respectively. </p>"},{"location":"guide/simulate/reads/#alignments-processing","title":"Alignments processing","text":"<p>Simulators can optionally output alignment files, usually in SAM format, which are then converted to sorted and indexed BAM. In some case, alignment files are in other formats and need some processing to be correctly conterted to BAM. For example, pbsim3 output MAF alignment files with no sequence ID. <code>mess</code> which will add sequence IDs, and convert MAF to SAM and finally BAM using bioconvert. </p>"},{"location":"tutorials/","title":"Tutorials","text":"<p>Collection of tutorials to showcase <code>mess</code> usage examples.</p>"},{"location":"tutorials/#taxonomic-profiles-as-input","title":"Taxonomic profiles as input","text":""},{"location":"tutorials/#sequencing-technologies","title":"Sequencing technologies","text":""},{"location":"tutorials/profilers/","title":"Taxonomic profiles as input","text":"<p><code>mess</code> uses taxonomic IDs and read counts as input for read simulation, making it compatible with most popular taxonomic profilers like:</p> <ul> <li>Kraken2</li> <li>Bracken </li> </ul>"},{"location":"tutorials/profilers/#requirements","title":"Requirements","text":"<p>Install:</p> <ul> <li>csvtk (&gt;=0.30.0)</li> <li>taxonkit</li> <li>taxpasta</li> </ul>"},{"location":"tutorials/profilers/bracken/","title":"Bracken","text":""},{"location":"tutorials/profilers/bracken/#input","title":"Input","text":""},{"location":"tutorials/profilers/bracken/#download-an-example","title":"Download an example","text":"<p>We can use a bracken report from bracken's sample data.</p> <pre><code>curl https://raw.githubusercontent.com/jenniferlu717/Bracken/master/sample_data/sample_output_species_abundance.txt -o bracken.txt\n</code></pre>"},{"location":"tutorials/profilers/bracken/#format-table","title":"Format table","text":"<p>We can use csvtk to extract the required columns (taxonomy_id and new_est_reads) for the <code>mess</code> input table.</p> <pre><code>csvtk cut -t -f taxonomy_id,new_est_reads bracken.txt \\\n    | csvtk rename -t -f 1,2 -n taxon,reads \\\n    | csvtk -t sort -k reads:nr &gt; bracken.tsv\n</code></pre>"},{"location":"tutorials/profilers/bracken/#update-taxids","title":"Update taxids","text":"<p>Use taxonkit to update removed/merged taxids</p> <pre><code>csvtk cut -t -U -f taxon bracken.tsv \\\n    | taxonkit lineage --show-status-code 2&gt; tax.log \\\n    | csvtk -t add-header -n old_taxid,updated_taxid,lineage 1&gt; lineage.tsv\n</code></pre> <p>Checking the tax.log (as of may 2024)</p> <pre><code>$ cat tax.log\n11:03:42.688 [WARN] taxid 1172 was merged into 264691\n11:03:42.688 [WARN] taxid 86662 was merged into 1405\n</code></pre> <p>Get the updated taxids, with taxid count</p> <pre><code>csvtk join -t bracken.tsv lineage.tsv -f 1 \\\n    | csvtk cut -t -f updated_taxid,reads \\\n    | csvtk rename -t -f 1,2 -n taxon,reads &gt; updated.tsv\n</code></pre>"},{"location":"tutorials/profilers/bracken/#replace-unclassified-taxids","title":"Replace unclassified taxids","text":"<p>Failure</p> <p>Some taxids have no genome data available !</p> <p>For example, 60481, 164757 and 189918 correspond to unclassified Shewanella sp. MR-7, Mycobacterium sp. JLS and Mycobacterium sp. KMS, repsectively. </p> <p>We can replace unclassified species with other species from the same genus. </p> <p>We also add the nb column to tell mess to download one genome per taxon.</p> <pre><code>cat updated.tsv \\\n    | csvtk replace -t -f taxon -p \"60481\" -r \"211586\" \\\n    | csvtk replace -t -f taxon -p \"164757\" -r \"83332\" \\\n    | csvtk replace -t -f taxon -p \"189918\" -r \"557599\" \\\n    &gt; clean.tsv\n</code></pre>"},{"location":"tutorials/profilers/bracken/#subsample","title":"Subsample","text":"<p>For a quick run (~ 5 min with 10 threads), we can subset the top 10 most abundant taxa for our simulation.</p> <pre><code>csvtk head -t -n 10 clean.tsv &gt; subsample.tsv\n</code></pre> subsample.tsv taxon reads 562 1449813 1396 1288824 1280 1212241 1076 824296 83332 699935 148447 656706 132919 622314 272131 590648 303 515978 32046 466493"},{"location":"tutorials/profilers/bracken/#simulate","title":"Simulate","text":"<p>Now that we cleaned up and subsampled bracken's taxonomic profile we can use it for <code>mess run</code>.</p> <p>By default, mess downloads 1 reference genome per taxon and excludes atypical genomes (see download guide. ) For read simulation, the default parameters generate paired 150 bp illumina reads using art_illumina's HiSeq 2500 error profile.</p> <p>Using the <code>--bam</code> flag yields an alignment file and a ground truth taxonomic profile.  <pre><code>mess run -i subsample.tsv --bam --threads 10\n</code></pre></p>"},{"location":"tutorials/profilers/bracken/#output","title":"Output","text":""},{"location":"tutorials/profilers/bracken/#fastq","title":"fastq","text":"<pre><code>$ seqkit stats mess_out/fastq/*.fq.gz --all\nprocessed files:  2 / 2 [======================================] ETA: 0s. done\nfile                               format  type   num_seqs        sum_len  min_len  avg_len  max_len   Q1   Q2   Q3  sum_gap  N50  Q20(%)  Q30(%)  AvgQual  GC(%)\nmess_out/fastq/subsample_R1.fq.gz  FASTQ   DNA   8,326,992  1,249,048,800      150      150      150  150  150  150        0  150   98.01   91.67    27.79  50.76\nmess_out/fastq/subsample_R2.fq.gz  FASTQ   DNA   8,326,992  1,249,048,800      150      150      150  150  150  150        0  150   97.31   89.64    26.51  50.76\n</code></pre> <ul> <li> Total read count correspond to the one requested in the input (256 reads difference) </li> </ul>"},{"location":"tutorials/profilers/bracken/#taxonomic-profile","title":"Taxonomic profile","text":"<p>Bracken composition</p> taxon reads seq_abundance 562 1449813 0.17410469821482438 1396 1288824 0.15477190063271803 1280 1212241 0.14557522485219607 1076 824296 0.09898780485461704 83332 699935 0.08405357928573762 148447 656706 0.07886230841209485 132919 622314 0.07473225248005103 272131 590648 0.07092955559868037 303 515978 0.06196260757455525 32046 466493 0.056020068094525345 <p>Simulated composition </p> <p>I calculated sequence abundances from true read counts in <code>logs/coverage/subsample.tsv</code>, and added each genomes taxid at species level (with <code>taxonkit reformat --show-lineage-taxids</code>).</p> taxon reads seq_abundance 562 1449799 0.1741083695048584 1396 1288786 0.1547720953736955 1280 1212160 0.1455699729265982 1076 824275 0.0989883261566721 1773 699930 0.0840555629211604 148447 656686 0.0788623310794582 132919 622291 0.0747317879013213 272131 590622 0.0709286138379861 303 515970 0.0619635517843658 32046 466473 0.0560193885138835 <p>I used a wilcoxon test to compare abundances <pre><code>&gt;&gt;&gt; from scipy.stats import wilcoxon\n&gt;&gt;&gt; delta = abs(real_df[\"seq_abundance\"] - sim_df[\"seq_abundance\"])\n&gt;&gt;&gt; wilcoxon(delta)\nWilcoxonResult(statistic=24.0, pvalue=0.76953125)\n</code></pre></p> <ul> <li> Non significant difference in sequence abundance between the simulated and real sample (mean delta = \\({1.47}^{-06}\\), \\(p=0.77\\)) </li> </ul>"},{"location":"tutorials/profilers/kraken2/","title":"Kraken2","text":""},{"location":"tutorials/profilers/kraken2/#input","title":"Input","text":""},{"location":"tutorials/profilers/kraken2/#download-an-example","title":"Download an example","text":"<p>We can use a kraken report from bracken's sample data</p> <pre><code>curl https://raw.githubusercontent.com/jenniferlu717/Bracken/master/sample_data/sample_output_bracken.report -o kreport.txt\n</code></pre>"},{"location":"tutorials/profilers/kraken2/#format-report","title":"Format report","text":"<p>We can use taxpasta to convert kraken reports (and others) to a format compatible with <code>mess</code></p> <pre><code>taxpasta standardise --profiler kraken2 --output sample.tsv kreport.txt\n</code></pre>"},{"location":"tutorials/profilers/kraken2/#sort-and-filter-taxids","title":"Sort and filter taxids","text":"<p>Sort by descending read count, filter zero counts and unclassified taxids with csvtk</p> <pre><code>cat sample.tsv \\\n    | csvtk filter2 -t -f '$taxonomy_id &gt; 0 &amp;&amp; $count &gt; 0' \\\n    | csvtk rename -t -f 1,2 -n taxon,reads \\\n    | csvtk sort -t -k reads:nr &gt; filtered.tsv\n</code></pre>"},{"location":"tutorials/profilers/kraken2/#update-taxids","title":"Update taxids","text":"<p>Update taxids and add their lineage with taxonkit</p> <p><pre><code>csvtk cut -t -U -f taxon filtered.tsv \\\n    | taxonkit lineage --show-status-code 2&gt; tax.log \\\n    | csvtk -t add-header -n old_taxid,updated_taxid,lineage 1&gt; lineage.tsv\n</code></pre> Checking the tax.log (as of may 2024)</p> <pre><code>$ cat tax.log\n17:07:59.845 [WARN] taxid 86662 was merged into 1405\n17:07:59.845 [WARN] taxid 62928 was merged into 418699\n17:07:59.845 [WARN] taxid 1172 was merged into 264691\n</code></pre> <p>Join updated taxids with read counts</p> <pre><code>csvtk join -t filtered.tsv lineage.tsv -f 1 \\\n    | csvtk cut -t -f updated_taxid,reads \\\n    | csvtk rename -t -f 1,2 -n taxon,reads &gt; updated.tsv\n</code></pre>"},{"location":"tutorials/profilers/kraken2/#replace-unclassified-taxids","title":"Replace unclassified taxids","text":"<p>Failure</p> <p>Some taxids have no genome data available !</p> <p>For example, 60481, 164757 and 189918 correspond to unclassified Shewanella sp. MR-7, Mycobacterium sp. JLS and Mycobacterium sp. KMS, repsectively. </p> <p>We can replace unclassified species with other species from the same genus. </p> <p>We also add the nb column to tell mess to download one genome per taxon.</p> <pre><code>cat updated.tsv \\\n    | csvtk replace -t -f taxon -p \"60481\" -r \"211586\" \\\n    | csvtk replace -t -f taxon -p \"164757\" -r \"83332\" \\\n    | csvtk replace -t -f taxon -p \"189918\" -r \"557599\" \\\n    &gt; clean.tsv\n</code></pre>"},{"location":"tutorials/profilers/kraken2/#subsample","title":"Subsample","text":"<p>For a quick run (~ 5 min with 10 threads), we can subset the top 10 most abundant taxa for our simulation.</p> <pre><code>csvtk head -t -n 10 clean.tsv &gt; subsample.tsv\n</code></pre> subsample.tsv taxon reads 562 1449813 1396 1288824 1280 1212241 1076 824296 83332 699935 148447 656706 132919 622314 272131 590648 303 515978 32046 466493"},{"location":"tutorials/profilers/kraken2/#simulate","title":"Simulate","text":"<p>Now that we cleaned up and subsampled bracken's taxonomic profile we can use it for <code>mess run</code>.</p> <p>By default, mess downloads 1 reference genome per taxon and excludes atypical genomes (see download guide. ) For read simulation, the default parameters generate paired 150 bp illumina reads using art_illumina's HiSeq 2500 error profile.</p> <p>Using the <code>--bam</code> flag yields an alignment file and a ground truth taxonomic profile.  <pre><code>mess run -i subsample.tsv --bam --threads 10\n</code></pre></p>"},{"location":"tutorials/profilers/kraken2/#output","title":"Output","text":""},{"location":"tutorials/profilers/kraken2/#fastq","title":"fastq","text":"<pre><code>$ seqkit stats mess_out/fastq/*.fq.gz --all\nprocessed files:  2 / 2 [======================================] ETA: 0s. done\nfile                               format  type   num_seqs        sum_len  min_len  avg_len  max_len   Q1   Q2   Q3  sum_gap  N50  Q20(%)  Q30(%)  AvgQual  GC(%)\nmess_out/fastq/subsample_R1.fq.gz  FASTQ   DNA   8,326,992  1,249,048,800      150      150      150  150  150  150        0  150   98.01   91.67    27.79  50.76\nmess_out/fastq/subsample_R2.fq.gz  FASTQ   DNA   8,326,992  1,249,048,800      150      150      150  150  150  150        0  150   97.31   89.64    26.51  50.76\n</code></pre> <ul> <li> Total read count correspond to the one requested in the input (256 reads difference) </li> </ul>"},{"location":"tutorials/profilers/kraken2/#taxonomic-profile","title":"Taxonomic profile","text":"<p>Kraken2 composition</p> taxon reads seq_abundance 562 1449813 0.17410469821482438 1396 1288824 0.15477190063271803 1280 1212241 0.14557522485219607 1076 824296 0.09898780485461704 83332 699935 0.08405357928573762 148447 656706 0.07886230841209485 132919 622314 0.07473225248005103 272131 590648 0.07092955559868037 303 515978 0.06196260757455525 32046 466493 0.056020068094525345 <p>Simulated composition </p> <p>I calculated sequence abundances from true read counts in <code>logs/coverage/subsample.tsv</code>, and added each genomes taxid at species level (with <code>taxonkit reformat --show-lineage-taxids</code>).</p> taxon reads seq_abundance 562 1449799 0.1741083695048584 1396 1288786 0.1547720953736955 1280 1212160 0.1455699729265982 1076 824275 0.0989883261566721 1773 699930 0.0840555629211604 148447 656686 0.0788623310794582 132919 622291 0.0747317879013213 272131 590622 0.0709286138379861 303 515970 0.0619635517843658 32046 466473 0.0560193885138835 <p>I used a wilcoxon test to compare abundances <pre><code>&gt;&gt;&gt; from scipy.stats import wilcoxon\n&gt;&gt;&gt; delta = abs(real_df[\"seq_abundance\"] - sim_df[\"seq_abundance\"])\n&gt;&gt;&gt; wilcoxon(delta)\nWilcoxonResult(statistic=24.0, pvalue=0.76953125)\n</code></pre></p> <ul> <li> Non significant difference in sequence abundance between the simulated and real sample (mean delta = \\({1.47}^{-06}\\), \\(p=0.77\\)) </li> </ul>"},{"location":"tutorials/seqtech/","title":"Sequencing technologies","text":"<p>Below are some tutorials detailing the parameters to use for short and long read simulation </p>"},{"location":"tutorials/seqtech/#illumina","title":"Illumina","text":""},{"location":"tutorials/seqtech/#nanopore","title":"Nanopore","text":""},{"location":"tutorials/seqtech/#pacbio","title":"PacBio","text":""},{"location":"tutorials/seqtech/illumina/","title":"ART","text":"<p><code>art_illumina</code> is the default illumina read simulator in <code>mess</code> and can generate reads with built-in or custom error profiles.</p>"},{"location":"tutorials/seqtech/illumina/#built-in-error-profile","title":"Built-in error profile","text":"<p>from <code>art_illumina</code> help: <pre><code>GA1 - GenomeAnalyzer I (36bp,44bp), GA2 - GenomeAnalyzer II (50bp, 75bp)\nHS10 - HiSeq 1000 (100bp),          HS20 - HiSeq 2000 (100bp),      HS25 - HiSeq 2500 (125bp, 150bp)\nHSXn - HiSeqX PCR free (150bp),     HSXt - HiSeqX TruSeq (150bp),   MinS - MiniSeq TruSeq (50bp)\nMSv1 - MiSeq v1 (250bp),            MSv3 - MiSeq v3 (250bp),        NS50 - NextSeq500 v2 (75bp)\n</code></pre> By default, <code>mess</code> uses the Hiseq 2500 error model to generate paired 150 bp read lengths with a mean and standard deviation fragment length of 200 and 10 respectively.</p> <p>Built-in error profile, mean read length, mean and standard deviation fragment length can be changed with <code>--error</code>, <code>--mean-length</code>, <code>--frag-len</code> and <code>--frag-sd</code> respectively.</p>"},{"location":"tutorials/seqtech/illumina/#hiseq-2000","title":"HiSeq 2000","text":"<pre><code>mess test \\\n    --tech illumina \\\n    --error HS20 \\\n    --mean-len 100 \\\n    --frag-len 200 \\\n    --frag-sd 10 \\\n    --output hs20\n</code></pre>"},{"location":"tutorials/seqtech/illumina/#miseq-v3","title":"Miseq v3","text":"<pre><code>mess test \\\n    --tech illumina \\\n    --error MSv3 \\\n    --mean-len 250 \\\n    --frag-len 500 \\\n    --frag-sd 10 \\\n    --output msv3\n</code></pre>"},{"location":"tutorials/seqtech/illumina/#custom-error-profiles","title":"Custom error profiles","text":"<p>If you want to use updated error profiles, your best bet is to use custom profiles, which can be generated using art_illumina_profiles. </p> <p>Tip</p> <p><code>art_illumina_profiles</code> needs alignments from reference data like Genome in a bottle (GIAB). You can find bam and bam.bai in NCBI's reference samples ftp </p>"},{"location":"tutorials/seqtech/illumina/#giab-hiseq-300x","title":"GIAB hiseq 300x","text":"<p>Download forward and reverse error profiles <pre><code>curl -O https://raw.githubusercontent.com/hzi-bifo/art_illumina_profiles/master/example_profile/RMNISTHS_30xdownsample.1.txt \\\n    -O https://raw.githubusercontent.com/hzi-bifo/art_illumina_profiles/master/example_profile/RMNISTHS_30xdownsample.2.txt\n</code></pre> Run test command with custom profile (maximum read length is 148bp)</p> <pre><code>mess test \\\n    --tech illumina \\\n    --custom-err RMNISTHS_30xdownsample \\\n    --mean-len 148 \\\n    --frag-len 300 \\\n    --frag-sd 10 \\\n    --output giab_hs300x\n</code></pre>"},{"location":"tutorials/seqtech/illumina/#mbarc-26","title":"MBARC-26","text":"<p><code>CAMISIM</code> also provides custom pre-built error profiles like the MBARC-26 error profile, which can be used by <code>mess</code>.</p> <p>Download forward and reverse error profiles <pre><code>curl -O https://raw.githubusercontent.com/CAMI-challenge/CAMISIM/master/tools/art_illumina-2.3.6/profiles/ART_MBARC-26_HiSeq_R1.txt \\\n    -O https://raw.githubusercontent.com/CAMI-challenge/CAMISIM/master/tools/art_illumina-2.3.6/profiles/ART_MBARC-26_HiSeq_R2.txt\n</code></pre></p> <p>Run test command with custom profile</p> <pre><code>mess test \\\n    --tech illumina \\\n    --custom-err ART_MBARC-26_HiSeq_R \\\n    --mean-len 150 \\\n    --frag-len 270 \\\n    --frag-sd 27 \\\n    --output mbarc26\n</code></pre>"},{"location":"tutorials/seqtech/nanopore/","title":"PBSIM3","text":"<p>You can customize <code>pbsim3</code> parameters to generate a wide range of Nanopore error profiles</p>"},{"location":"tutorials/seqtech/nanopore/#r1041","title":"R10.4.1","text":"<p>By default, <code>mess</code> uses the high quality error profile (QSHMM-ONT-HQ) based on the R10.4 flowcell, which simulates reads with similar accuracy compared to the R10.4.1 flowcell.</p> <p>In addition, <code>mess</code> uses the pbsim3 recommended Nanopore substitution:insertion:deletion ratio (39:24:36) coupled with 0.99 accuracy as show below:</p> <pre><code>ratio: '39:24:36'\nmax_len: 1000000\nmean_len: 9000\nmin_len: 100\nsd_len: 7000\naccuracy: 0.99\nmodel: QSHMM-ONT-HQ\n</code></pre> <p>Simulate R10.4.1 reads with the test command</p> <pre><code>mess test \\\n    --tech nanopore \\\n    --output r10.4.1\n</code></pre>"},{"location":"tutorials/seqtech/nanopore/#r103","title":"R10.3","text":"<p>You can tweak <code>mess</code> parameters to mimic older Nanopore flowcells</p> <pre><code>mess test \\\n    --tech nanopore \\\n    --model QSHMM-ONT \\\n    --accuracy 0.95 \\\n    --output r10.3\n</code></pre>"},{"location":"tutorials/seqtech/pacbio/","title":"PBSIM3","text":"<p>You can customize <code>pbsim3</code> parameters to generate PacBio CLR or HIFI reads</p>"},{"location":"tutorials/seqtech/pacbio/#clr","title":"CLR","text":"<p>Defaults:</p> <pre><code>ratio: '22:45:33'\nmax_len: 1000000\nmean_len: 9000\nmin_len: 100\nsd_len: 7000\naccuracy: 0.85\nmodel: QSHMM-RSII\n</code></pre> <p>Simulate CLR reads with the test command</p> <pre><code>mess test \\\n    --tech pacbio \\\n    --output pacbio_clr\n</code></pre>"},{"location":"tutorials/seqtech/pacbio/#hifi","title":"HIFI","text":"<p>You can add <code>--error hifi</code> to simulate highly accurate PacBio reads with 10 passes</p> <p>Defaults: <pre><code>ratio: '22:45:33'\nmax_len: 1000000\nmean_len: 9000\nmin_len: 100\nsd_len: 7000\naccuracy: 0.999\npasses: 10\nmodel: QSHMM-RSII\n</code></pre></p> <p>Run: <pre><code>mess test \\\n    --tech pacbio \\\n    --error hifi \\\n    --output pacbio_hifi\n</code></pre></p>"}]}